import React, { useState, useEffect } from 'react';
import { supabase } from '../services/supabaseClient';
import './UsersPage.css'; // Shared or specific CSS

const UsersPage = () => {
  const [profiles, setProfiles] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [message, setMessage] = useState({ type: '', text: '' });

  const [isFormOpen, setIsFormOpen] = useState(false);
  const [currentProfile, setCurrentProfile] = useState({
    id: null, // UUID from auth.users, or auto-increment if separate table without direct link
    full_name: '',
    email: '', // Should be unique if used for login
    role: 'User', // Default role
    // user_id: '' // Foreign key to auth.users.id if profiles are linked
  });
  const [isEditing, setIsEditing] = useState(false);

  // Fetch profiles
  const fetchProfiles = async () => {
    setLoading(true);
    setError(null);
    try {
      const { data, error: fetchError } = await supabase
        .from('profiles') // Assuming 'profiles' table
        .select('*')
        .order('created_at', { ascending: false });

      if (fetchError) throw fetchError;
      setProfiles(data || []);
    } catch (err) {
      setError(err.message || 'Failed to fetch profiles.');
      setProfiles([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchProfiles();
  }, []);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setCurrentProfile(prev => ({ ...prev, [name]: value }));
  };

  const openFormForCreate = () => {
    setIsEditing(false);
    setCurrentProfile({ id: null, full_name: '', email: '', role: 'User' });
    setIsFormOpen(true);
    setMessage({ type: '', text: '' });
  };

  const openFormForEdit = (profile) => {
    setIsEditing(true);
    setCurrentProfile(profile);
    setIsFormOpen(true);
    setMessage({ type: '', text: '' });
  };

  const closeForm = () => {
    setIsFormOpen(false);
    setIsEditing(false);
    setCurrentProfile({ id: null, full_name: '', email: '', role: 'User' });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setMessage({ type: '', text: '' });

    if (!currentProfile.full_name || !currentProfile.email) {
        setMessage({ type: 'error', text: 'Full Name and Email are required.' });
        setLoading(false);
        return;
    }

    try {
      let supabaseError;
      if (isEditing) {
        // Note: Supabase RLS policies must allow updates on 'profiles' table.
        // The 'id' for profiles should ideally be the user_id from auth.users.
        // If 'email' is part of auth.users, updating it here might not change the login email.
        // This form primarily manages metadata in the 'profiles' table.
        const { error } = await supabase
          .from('profiles')
          .update({
            full_name: currentProfile.full_name,
            // email: currentProfile.email, // Be cautious if this is auth.users email
            role: currentProfile.role
          })
          .eq('id', currentProfile.id); // Ensure 'id' is the correct primary key of 'profiles'
        supabaseError = error;
      } else {
        // For creating a new profile. This does NOT create an auth user.
        // It's assumed an auth user might be created separately or this profile is for other purposes.
        // If 'id' is a foreign key to auth.users.id, it must be provided.
        // If 'id' is auto-generated by 'profiles' table, omit it here.
        const profileData = {
            // id: currentProfile.id, // Provide if it's a FK and known
            full_name: currentProfile.full_name,
            email: currentProfile.email, // Ensure this doesn't conflict if it needs to be unique
            role: currentProfile.role,
            // user_id: currentProfile.user_id // if you have a separate user_id field
        };
        // Remove id if it's auto-incrementing and null
        if (profileData.id === null) delete profileData.id;

        const { error } = await supabase.from('profiles').insert([profileData]);
        supabaseError = error;
      }

      if (supabaseError) throw supabaseError;

      setMessage({ type: 'success', text: `Profile ${isEditing ? 'updated' : 'created'} successfully!` });
      fetchProfiles();
      closeForm();
    } catch (err) {
      setMessage({ type: 'error', text: `Operation failed: ${err.message}` });
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (profileId) => {
    if (window.confirm('Are you sure you want to delete this profile?')) {
      setLoading(true);
      setMessage({ type: '', text: '' });
      try {
        // RLS policies must allow delete. Consider implications if profile is linked to auth.user.
        const { error } = await supabase
          .from('profiles')
          .delete()
          .eq('id', profileId); // Ensure 'id' is the correct PK.

        if (error) throw error;

        setMessage({ type: 'success', text: 'Profile deleted successfully.' });
        fetchProfiles();
      } catch (err) {
        setMessage({ type: 'error', text: `Delete failed: ${err.message}` });
      } finally {
        setLoading(false);
      }
    }
  };

  return (
    <div className="admin-page users-page">
      <h1>User Management</h1>
      {message.text && <div className={`message ${message.type}`}>{message.text}</div>}

      {!isFormOpen && (
        <button onClick={openFormForCreate} className="admin-button primary">Add New Profile</button>
      )}

      {isFormOpen && (
        <div className="form-container">
          <h2>{isEditing ? 'Edit Profile' : 'Add New Profile'}</h2>
          <form onSubmit={handleSubmit}>
            {/* If 'id' is a UUID from auth.users and you're linking, you might show it or pass it if known */}
            {/* For this example, 'id' is handled implicitly or assumed to be auto-generated if not editing */}
            <div className="form-group">
              <label htmlFor="full_name">Full Name:</label>
              <input type="text" id="full_name" name="full_name" value={currentProfile.full_name} onChange={handleInputChange} required />
            </div>
            <div className="form-group">
              <label htmlFor="email">Email:</label>
              <input type="email" id="email" name="email" value={currentProfile.email} onChange={handleInputChange} required />
            </div>
            <div className="form-group">
              <label htmlFor="role">Role:</label>
              <select id="role" name="role" value={currentProfile.role} onChange={handleInputChange}>
                <option value="User">User</option>
                <option value="Admin">Admin</option>
                <option value="Editor">Editor</option>
                {/* Add more roles as needed */}
              </select>
            </div>
            <button type="submit" className="admin-button primary" disabled={loading}>
              {loading ? 'Saving...' : (isEditing ? 'Update Profile' : 'Create Profile')}
            </button>
            <button type="button" onClick={closeForm} className="admin-button secondary" disabled={loading}>
              Cancel
            </button>
          </form>
        </div>
      )}

      <h2>User Profiles List</h2>
      {loading && !isFormOpen && <p>Loading profiles...</p>}
      {error && <p style={{ color: 'red' }}>{error}</p>}

      {!loading && !error && profiles.length === 0 && !isFormOpen && <p>No profiles found.</p>}

      {!isFormOpen && profiles.length > 0 && (
        <div className="admin-table-container"> {/* Added wrapper */}
          <table className="admin-table">
            <thead>
              <tr>
                <th>ID</th>
              <th>Full Name</th>
              <th>Email</th>
              <th>Role</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {profiles.map(profile => (
              <tr key={profile.id}>
                <td>{profile.id}</td>
                <td>{profile.full_name}</td>
                <td>{profile.email}</td>
                <td>{profile.role}</td>
                <td className="actions">
                  <button onClick={() => openFormForEdit(profile)} className="admin-button primary">Edit</button>
                  <button onClick={() => handleDelete(profile.id)} className="admin-button danger" disabled={loading}>Delete</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div> /* Closing wrapper */
      )}
    </div>
  );
};

export default UsersPage;
